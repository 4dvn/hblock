#!/bin/sh

# Author:     Héctor Molinero Fernández <hector@molinero.xyz>
# Repository: https://github.com/zant95/hBlock
# License:    MIT, https://opensource.org/licenses/MIT

# Exit on errors
set -eu

# Globals
export LC_ALL=C

hostname=$(uname -n)
# Prevent adding 'localhost' twice
hostname=$(printf -- '%s' "$hostname" | sed '/^localhost$/d')
# Prevent adding GitLab CI runner hostname
hostname=$(printf -- '%s' "$hostname" | sed '/^runner-[[:alnum:]]\{8\}-project-.*$/d')

# Default options
output='/etc/hosts'
redirection='0.0.0.0'
backup='no'
lenient='no'
ignoreDownloadError='no'
custom=''

# Default header
header=$(cat <<-EOF
	127.0.0.1       localhost $hostname
	255.255.255.255 broadcasthost
	::1             localhost ip6-localhost ip6-loopback
	fe00::0         ip6-localnet
	ff00::0         ip6-mcastprefix
	ff02::1         ip6-allnodes
	ff02::2         ip6-allrouters
	ff02::3         ip6-allhosts
EOF
)

# Default sources
sources=$(cat <<-'EOF'
	https://raw.githubusercontent.com/zant95/hmirror/master/data/adaway.org/list.txt
	https://raw.githubusercontent.com/zant95/hmirror/master/data/disconnect.me-ad/list.txt
	https://raw.githubusercontent.com/zant95/hmirror/master/data/disconnect.me-malvertising/list.txt
	https://raw.githubusercontent.com/zant95/hmirror/master/data/disconnect.me-malware/list.txt
	https://raw.githubusercontent.com/zant95/hmirror/master/data/disconnect.me-tracking/list.txt
	https://raw.githubusercontent.com/zant95/hmirror/master/data/fademind-add.2o7net/list.txt
	https://raw.githubusercontent.com/zant95/hmirror/master/data/fademind-add.dead/list.txt
	https://raw.githubusercontent.com/zant95/hmirror/master/data/fademind-add.risk/list.txt
	https://raw.githubusercontent.com/zant95/hmirror/master/data/fademind-add.spam/list.txt
	https://raw.githubusercontent.com/zant95/hmirror/master/data/kadhosts/list.txt
	https://raw.githubusercontent.com/zant95/hmirror/master/data/malwaredomainlist.com/list.txt
	https://raw.githubusercontent.com/zant95/hmirror/master/data/malwaredomains.com-immortaldomains/list.txt
	https://raw.githubusercontent.com/zant95/hmirror/master/data/malwaredomains.com-justdomains/list.txt
	https://raw.githubusercontent.com/zant95/hmirror/master/data/pgl.yoyo.org/list.txt
	https://raw.githubusercontent.com/zant95/hmirror/master/data/ransomwaretracker.abuse.ch/list.txt
	https://raw.githubusercontent.com/zant95/hmirror/master/data/someonewhocares.org/list.txt
	https://raw.githubusercontent.com/zant95/hmirror/master/data/spam404.com/list.txt
	https://raw.githubusercontent.com/zant95/hmirror/master/data/winhelp2002.mvps.org/list.txt
	https://raw.githubusercontent.com/zant95/hmirror/master/data/zeustracker.abuse.ch/list.txt
EOF
)

# Default whitelist
#   POSIX basic regex
#     \.com$              -> all domains that ends with '.com'.
#     ^example            -> all domains that starts with 'example'.
#     ^sub\.example\.org$ -> domain 'sub.example.org'.
whitelist=$(cat <<-'EOF'
EOF
)

# Default blacklist
blacklist=$(cat <<-'EOF'
EOF
)

# Methods
printInfo() {
	printf -- '   - %s\n' "$@"
}

printAction() {
	printf -- '\033[1;33m + \033[1;32m%s \033[0m\n' "$@"
}

printError() {
	>&2 printf -- '\033[1;33m + \033[1;31m%s \033[0m\n' "$@"
}

checkBinary() {
	command -v -- "$@" >/dev/null 2>&1
}

checkDownloadAbility() {
	if ! checkBinary curl && ! checkBinary wget; then
		printError 'Either wget or curl are required for this script'
		exit 1
	fi
}

fetchUrl() {
	userAgent='Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0'

	if checkBinary curl; then
		curl -fsSL -A "$userAgent" -- "$@"
	else
		wget -qO- -U "$userAgent" -- "$@"
	fi
}

writeFile() {
	if [ -d "$2" ]; then
		printError "Cannot write '$2': is a directory"
		exit 1
	elif ([ -e "$2" ] && [ -w "$2" ]) || touch -- "$2" >/dev/null 2>&1; then
		printf -- '%s\n' "$1" | tee -- "$2" >/dev/null
	elif checkBinary sudo; then
		printf -- '%s\n' "$1" | sudo tee -- "$2" >/dev/null
	else
		printError "Cannot write '$2': permission denied"
		exit 1
	fi
}

escapeSedReplacement() {
	# Escape string literal for use as the replacement string in sed
	printf -- '%s' "$1" | sed 's/[&/\]/\\&/g'
}

showHelp() {
	if [ $# -eq 0 ]; then
		printf -- '%s\n' "$(cat <<-'EOF'
			Usage: hblock [options...]
			 -O, --output FILE            Output file (default: /etc/hosts)
			 -R, --redirection IP         Domain redirection IP (default: 0.0.0.0)
			 -H, --header STRING          File header (default: see source code)
			 -S, --sources STRING         Space separated URLs (default: see source code)
			 -W, --whitelist STRING       Space separated entries, POSIX basic regex (default: see source code)
			 -B, --blacklist STRING       Space separated entries (default: see source code)
			 -b, --backup                 Make a time-stamped backup (default: disabled)
			 -l, --lenient                Select any IP address from sources (default: 0.0.0.0, 127.0.0.1 or none)
			 -i, --ignore-download-error  Do not abort on download error (default: disabled)
			 -h, --help                   Print this help
		EOF
		)"
		exit 0
	else
		[ -n "$1" ] && >&2 printf -- '%s\n' "Illegal option $1"
		>&2 printf -- '%s\n' "Try 'hblock --help' for more information"
		exit 1
	fi
}

setOptions() {
	# Transform long options to short ones
	for opt in "$@"; do
		shift
		case "$opt" in
			'--output')                set -- "$@" '-O' ;;
			'--redirection')           set -- "$@" '-R' ;;
			'--header')                set -- "$@" '-H' ;;
			'--sources')               set -- "$@" '-S' ;;
			'--whitelist')             set -- "$@" '-W' ;;
			'--blacklist')             set -- "$@" '-B' ;;
			'--backup')                set -- "$@" '-b' ;;
			'--lenient')               set -- "$@" '-l' ;;
			'--ignore-download-error') set -- "$@" '-i' ;;
			'--help')                  set -- "$@" '-h' ;;
			*)                         set -- "$@" "$opt"
		esac
	done

	OPTIND=1
	while getopts ':O:R:H:S:W:B:blih-:' opt; do
		case "$opt" in
			'O') output="$OPTARG" ;;
			'R') redirection="$OPTARG" ;;
			'H') header="$OPTARG" ;;
			'S') sources="$OPTARG" ;;
			'W') whitelist="$OPTARG" ;;
			'B') blacklist="$OPTARG" ;;
			'b') backup='yes' ;;
			'l') lenient='yes' ;;
			'i') ignoreDownloadError='yes' ;;
			'h') showHelp ;;
			'-') showHelp "--$OPTARG" ;;
			*)   showHelp "-$OPTARG"
		esac
	done
}

# Process
main() {
	blocklist=''

	printAction 'Configuration:'
	printInfo "Hosts location: $output"
	printInfo "Redirection IP: $redirection"
	printInfo "Backup: $backup"
	printInfo "Lenient: $lenient"
	printInfo "Ignore download error: $ignoreDownloadError"

	printAction 'Downloading lists...'
	checkDownloadAbility
	for url in $sources; do
		printInfo "$url"
		content=$(fetchUrl "$url") || true

		if [ -z "$content" ] && [ "$ignoreDownloadError" = 'no' ]; then
			printError 'Download failed'
			exit 1
		fi

		blocklist=$(printf -- '%s\n%s' "$blocklist" "$content")
		unset content
	done

	printAction 'Parsing lists...'

	# These steps are not necessary if the blocklist is empty
	if [ -n "$blocklist" ]; then
		printInfo 'Remove carriage return'
		blocklist=$(printf -- '%s' "$blocklist" | tr -d '\r')

		printInfo 'Remove comments'
		blocklist=$(printf -- '%s' "$blocklist" | sed 's/#.*//')

		printInfo 'Trim spaces'
		blocklist=$(printf -- '%s' "$blocklist" | sed 's/^[[:blank:]]*//;s/[[:blank:]]*$//')

		printInfo 'Select only hosts lines'
		if [ "$lenient" = 'yes' ]; then
			ipRegex='\([[:digit:]]\{1,3\}\.\)\{3\}[[:digit:]]\{1,3\}'
		else
			ipRegex='\(0\.0\.0\.0\)\{0,1\}\(127\.0\.0\.1\)\{0,1\}'
		fi
		domainRegex='\([[:alnum:]_-]\{1,63\}\.\)\{1,\}[[:alpha:]][[:alnum:]_-]\{1,62\}'
		blocklist=$(printf -- '%s' "$blocklist" | sed -n "/^\($ipRegex[[:blank:]]\{1,\}\)\{0,1\}$domainRegex$/p")

		printInfo 'Remove old destination'
		blocklist=$(printf -- '%s' "$blocklist" | sed 's/^.\{1,\}[[:blank:]]\{1,\}//')

		printInfo 'Transform all entries to lowercase'
		blocklist=$(printf -- '%s' "$blocklist" | tr '[:upper:]' '[:lower:]')

		printInfo 'Remove local entries'
		localDomainRegex='/\.\localdomain[[:blank:]]*$/d;/\.\local[[:blank:]]*$/d'
		blocklist=$(printf -- '%s' "$blocklist" | sed "$localDomainRegex")

		if [ -n "$whitelist" ]; then
			printInfo 'Apply whitelist'
			for domain in $whitelist; do
				blocklist=$(printf -- '%s' "$blocklist" | sed "/$domain/d")
			done
		fi

		if [ -n "$blacklist" ]; then
			printInfo 'Apply blacklist'
			for domain in $blacklist; do
				blocklist=$(printf -- '%s\n%s' "$blocklist" "$domain")
			done
		fi
	elif [ -n "$blacklist" ]; then
		# The blacklist is treated as the blocklist if the original blocklist is empty
		printInfo 'Apply blacklist'
		blocklist=$(printf -- '%s' "$blacklist" | sed 's/[[:blank:]]\{1,\}/\n/g')
	fi

	# These steps are not necessary if the blocklist is empty
	if [ -n "$blocklist" ]; then
		printInfo 'Remove empty lines'
		blocklist=$(printf -- '%s' "$blocklist" | sed '/^$/d')

		printInfo 'Sort entries'
		blocklist=$(printf -- '%s' "$blocklist" | sort | uniq)

		printInfo 'Add new destination'
		redirection=$(escapeSedReplacement "$redirection")
		blocklist=$(printf -- '%s' "$blocklist" | sed "s/^/$redirection /")
	fi

	if [ -f "$output" ]; then
		currentContent=$(cat -- "$output")

		# Get custom section
		custom=$(
			printf -- '%s' "$currentContent" | sed '/^#.*<custom>/,/^#.*<\/custom>/!d;//d' &&
			# "<user-defined>" is deprecated, use "<custom>" instead
			printf -- '%s' "$currentContent" | sed '/^#.*<user-defined>/,/^#.*<\/user-defined>/!d;//d'
		)

		# Backup procedure
		if [ "$backup" = 'yes' ]; then
			printAction 'Backing up hosts file...'
			writeFile "$currentContent" "$output.$(date +%s).bak"
		fi
	fi

	# Hosts file template
	blockListDate=$(date -u)
	blocklistCount='0'
	if [ -n "$blocklist" ]; then
		blocklistCount=$(printf -- '%s\n' "$blocklist" | wc -l | tr -d '[:blank:]')
	fi

	hosts=$(cat <<-EOF
		# Author:              Héctor Molinero Fernández <hector@molinero.xyz>
		# Repository:          https://github.com/zant95/hBlock
		# Last updated:        $blockListDate
		# Blacklisted domains: $blocklistCount

		# <header>
		$header
		# </header>
		# <custom>
		$custom
		# </custom>
		# <blocklist>
		$blocklist
		# </blocklist>
	EOF
	)

	printAction 'Generating hosts file...'
	writeFile "$hosts" "$output"
	printAction "$blocklistCount blacklisted domains!"
}

setOptions "$@"
main

