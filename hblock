#!/bin/sh

# Author:     Héctor Molinero Fernández <hector@molinero.xyz>
# Repository: https://github.com/zant95/hBlock
# License:    MIT, https://opensource.org/licenses/MIT

# Exit on errors
set -eu

# Globals
export LC_ALL=C

hostname=$(uname -n)
# Prevent adding 'localhost' twice
hostname=$(printf -- '%s\n' "$hostname" | sed '/^localhost$/d')
# Prevent adding GitLab CI runner hostname
hostname=$(printf -- '%s\n' "$hostname" | sed '/^runner-[[:alnum:]]\{8\}-project-.*$/d')

# Default options
output='/etc/hosts'
redirection='0.0.0.0'
backup='no'
lenient='no'
assume='ask'

# Default header
header=$(cat <<-EOF
	127.0.0.1       localhost $hostname
	255.255.255.255 broadcasthost
	::1             localhost ip6-localhost ip6-loopback
	fe00::0         ip6-localnet ip6-mcastprefix
	ff02::1         ip6-allnodes
	ff02::2         ip6-allrouters
	ff02::3         ip6-allhosts
EOF
)

# Default sources
sources=$(cat <<-'EOF'
	http://mirror1.malwaredomains.com/files/immortal_domains.txt
	http://mirror1.malwaredomains.com/files/justdomains
	http://someonewhocares.org/hosts/hosts
	http://winhelp2002.mvps.org/hosts.txt
	https://adaway.org/hosts.txt
	https://isc.sans.edu/feeds/suspiciousdomains_High.txt
	https://pgl.yoyo.org/adservers/serverlist.php?hostformat=nohtml&mimetype=plaintext
	https://ransomwaretracker.abuse.ch/downloads/RW_DOMBL.txt
	https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt
	https://s3.amazonaws.com/lists.disconnect.me/simple_malvertising.txt
	https://s3.amazonaws.com/lists.disconnect.me/simple_malware.txt
	https://s3.amazonaws.com/lists.disconnect.me/simple_tracking.txt
	https://www.malwaredomainlist.com/hostslist/hosts.txt
	https://zeustracker.abuse.ch/blocklist.php?download=domainblocklist
EOF
)

# Default whitelist
#   POSIX basic regex
#     \.com$              -> all domains that ends with '.com'.
#     ^example            -> all domains that starts with 'example'.
#     ^sub\.example\.org$ -> domain 'sub.example.org'.
whitelist=$(cat <<-'EOF'
	^whitelist\.local$
	^adf\.ly$
EOF
)

# Default blacklist
blacklist=$(cat <<-'EOF'
	blacklist.local
EOF
)

# Methods
logMsg() {
	printf -- '   - %s\n' "$@"
}

infoMsg() {
	printf -- '\033[1;33m + \033[1;32m%s \033[0m\n' "$@"
}

errorMsg() {
	printf -- '\033[1;33m + \033[1;31m%s \033[0m\n' "$@"
}

promptMsg() {
	printf -- '\033[1;33m + \033[1;33m%s \033[0m[y/N]: ' "$@"
	if [ "$assume" = 'yes' ]; then
		printf -- '%s\n' 'y'
		return 0
	elif [ "$assume" = 'no' ]; then
		printf -- '%s\n' 'n'
		return 1
	else
		read answer
		case "$answer" in
			[yY]|[yY][eE][sS]) return 0 ;;
			*) return 1 ;;
		esac
	fi
}

checkBinary() {
	type "$@" >/dev/null 2>&1
}

checkDownloadAbility() {
	if ! checkBinary curl && ! checkBinary wget; then
		errorMsg 'Either wget or curl are required for this script'
		exit 1
	fi
}

fetchUrl() {
	if checkBinary curl; then
		curl -fsSL -A 'Mozilla/5.0' -- "$@"
	else
		wget -qO- -U 'Mozilla/5.0' -- "$@"
	fi
}

writeFile() {
	if touch -- "$2" >/dev/null 2>&1; then
		printf -- '%s\n' "$1" | tee -- "$2" >/dev/null
	elif checkBinary sudo; then
		printf -- '%s\n' "$1" | sudo tee -- "$2" >/dev/null
	else
		errorMsg "Cannot write '$2': Permission denied"
		exit 1
	fi
}

showHelp() {
	if [ $# -eq 0 ]; then
		printf -- '%s\n' "$(cat <<-'EOF'
			Usage: hblock [options...]
			 -O, --output FILE      Output file (default: /etc/hosts)
			 -R, --redirection IP   Domain redirection IP (default: 0.0.0.0)
			 -H, --header STRING    File header (default: see source code)
			 -S, --sources STRING   Space separated URLs (default: see source code)
			 -W, --whitelist STRING Space separated entries, POSIX basic regex (default: see source code)
			 -B, --blacklist STRING Space separated entries (default: see source code)
			 -b, --backup           Make a time-stamped backup (default: disabled)
			 -l, --lenient          Select any IP address from sources (default: 0.0.0.0, 127.0.0.1 or none)
			 -y, --yes              Automatic 'yes' to prompts (default: disabled)
			 -n, --no               Automatic 'no' to prompts (default: disabled)
			 -h, --help             Print this help
		EOF
		)"
		exit 0
	else
		[ -n "$1" ] && printf -- '%s\n' "Illegal option $1"
		printf -- '%s\n' "Try 'hblock --help' for more information"
		exit 1
	fi
}

setOptions() {
	# Transform long options to short ones
	for opt in "$@"; do
		shift
		case "$opt" in
			'--output')      set -- "$@" '-O' ;;
			'--redirection') set -- "$@" '-R' ;;
			'--header')      set -- "$@" '-H' ;;
			'--sources')     set -- "$@" '-S' ;;
			'--whitelist')   set -- "$@" '-W' ;;
			'--blacklist')   set -- "$@" '-B' ;;
			'--backup')      set -- "$@" '-b' ;;
			'--lenient')     set -- "$@" '-l' ;;
			'--yes')         set -- "$@" '-y' ;;
			'--no')          set -- "$@" '-n' ;;
			'--help')        set -- "$@" '-h' ;;
			*)               set -- "$@" "$opt"
		esac
	done

	OPTIND=1
	while getopts ':O:R:H:S:W:B:blynh-:' opt; do
		case "$opt" in
			'O') output="$OPTARG" ;;
			'R') redirection="$OPTARG" ;;
			'H') header="$OPTARG" ;;
			'S') sources="$OPTARG" ;;
			'W') whitelist="$OPTARG" ;;
			'B') blacklist="$OPTARG" ;;
			'b') backup='yes' ;;
			'l') lenient='yes' ;;
			'y') assume='yes' ;;
			'n') assume='no' ;;
			'h') showHelp ;;
			'-') showHelp "--$OPTARG" ;;
			*)   showHelp "-$OPTARG"
		esac
	done
}

# Process
main() {
	blocklist=''

	infoMsg 'Configuration:'
	logMsg "Hosts location: $output"
	logMsg "Redirection IP: $redirection"
	logMsg "Backup: $backup"
	logMsg "Lenient: $lenient"

	infoMsg 'Downloading lists...'
	checkDownloadAbility
	for url in $sources; do
		logMsg "$url"
		content=$(fetchUrl "$url") || true

		if [ -z "$content" ] && ! promptMsg 'Error downloading list, do you want to continue?'; then
			exit 1
		fi

		blocklist=$(printf -- '%s\n%s\n' "$blocklist" "$content")
		unset content
	done

	infoMsg 'Parsing lists...'
	logMsg 'Remove carriage return'
	blocklist=$(printf -- '%s\n' "$blocklist" | tr -d '\r')

	logMsg 'Remove comments'
	blocklist=$(printf -- '%s\n' "$blocklist" | sed 's/#.*$//g')

	logMsg 'Trim spaces'
	blocklist=$(printf -- '%s\n' "$blocklist" | sed 's/[[:blank:]]*$//g;s/^[[:blank:]]*//g')

	logMsg 'Remove empty lines'
	blocklist=$(printf -- '%s\n' "$blocklist" | sed '/^$/d')

	logMsg 'Select only hosts lines'
	if [ "$lenient" = 'yes' ]; then
		ipRegex='\([[:digit:]]\{1,3\}\.\)\{3\}[[:digit:]]\{1,3\}'
	else
		ipRegex='\(0\.0\.0\.0\)\{0,1\}\(127\.0\.0\.1\)\{0,1\}'
	fi
	domainRegex='\([[:alnum:]_-]\{1,63\}\.\)\{1,\}[[:alpha:]][[:alnum:]_-]\{1,62\}'
	blocklist=$(printf -- '%s\n' "$blocklist" | sed -n "/^\($ipRegex[[:blank:]]\{1,\}\)\{0,1\}$domainRegex$/p")

	logMsg 'Remove old destination'
	blocklist=$(printf -- '%s\n' "$blocklist" | sed "s/^.\{1,\}[[:blank:]]\{1,\}//g")

	logMsg 'Transform all entries to lowercase'
	blocklist=$(printf -- '%s\n' "$blocklist" | tr '[:upper:]' '[:lower:]')

	logMsg 'Remove local entries'
	localDomainRegex='/\.\localdomain[[:blank:]]*$/d;/\.\local[[:blank:]]*$/d'
	blocklist=$(printf -- '%s\n' "$blocklist" | sed "$localDomainRegex")

	logMsg 'Apply whitelist'
	for domain in $whitelist; do
		blocklist=$(printf -- '%s\n' "$blocklist" | sed "/$domain/d")
	done

	logMsg 'Apply blacklist'
	for domain in $blacklist; do
		blocklist=$(printf -- '%s\n%s\n' "$blocklist" "$domain")
	done

	logMsg 'Sort entries'
	blocklist=$(printf -- '%s\n' "$blocklist" | sort | uniq)

	logMsg 'Add new destination'
	blocklist=$(printf -- '%s\n' "$blocklist" | sed "s/^/$redirection /g")

	# Backup procedure
	if [ -f "$output" ] && [ "$backup" = 'yes' ]; then
		infoMsg 'Backing up hosts file...'
		writeFile "$(cat -- "$output")" "$output.$(date +%s).bak"
	fi

	# Hosts file template
	blockListDate=$(date -u)
	blocklistCount=$(printf -- '%s\n' "$blocklist" | wc -l)
	hosts=$(cat <<-EOF
		# Author:              Héctor Molinero Fernández <hector@molinero.xyz>
		# Repository:          https://github.com/zant95/hBlock
		# Last updated:        $blockListDate
		# Blacklisted domains: $blocklistCount

		# <header>
		$header
		# </header>

		# <blocklist>
		$blocklist
		# </blocklist>
	EOF
	)

	infoMsg 'Generating hosts file...'
	writeFile "$hosts" "$output"

	infoMsg "$blocklistCount blacklisted domains!"
}

setOptions "$@"
main

