#!/bin/sh

# Author:     Héctor Molinero Fernández <hector@molinero.xyz>
# Repository: https://github.com/zant95/hosts-update
# License:    MIT, https://opensource.org/licenses/MIT

# Exit on errors
set -eu

# Globals
readonly dstHosts='/etc/hosts'
readonly dstIp='0.0.0.0'
readonly header="
127.0.0.1       localhost
127.0.1.1       $(uname -n)
255.255.255.255 broadcasthost
::1             ip6-localhost ip6-loopback
fe00::0         ip6-localnet ip6-mcastprefix
ff02::1         ip6-allnodes
ff02::2         ip6-allrouters
ff02::3         ip6-allhosts
"
readonly sources='
	http://someonewhocares.org/hosts/hosts
	http://winhelp2002.mvps.org/hosts.txt
	https://adaway.org/hosts.txt
	https://mirror.cedia.org.ec/malwaredomains/justdomains
	https://pgl.yoyo.org/adservers/serverlist.php?hostformat=nohtml&mimetype=plaintext
	https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt
	https://s3.amazonaws.com/lists.disconnect.me/simple_malvertising.txt
	https://s3.amazonaws.com/lists.disconnect.me/simple_malware.txt
	https://s3.amazonaws.com/lists.disconnect.me/simple_tracking.txt
	https://www.malwaredomainlist.com/hostslist/hosts.txt
	https://raw.githubusercontent.com/zant95/hosts/master/hosts
'

# POSIX basic regex
#   \.com$              -> all domains that ends with '.com'.
#   ^example            -> all domains that starts whith 'example'.
#   ^sub\.example\.org$ -> domain 'sub.example.org'.
readonly whitelist='
	^whitelist\.local$
	^adf\.ly$
'

readonly blacklist='
	blacklist.local
'

# Methods
logMsg() {
	printf '   - %s\n' "$@"
}

infoMsg() {
	printf '\033[1;33m + \033[1;32m%s \033[0m\n' "$@"
}

errorMsg() {
	printf '\033[1;33m + \033[1;31m%s \033[0m\n' "$@"
}

promptMsg() {
	printf '\033[1;33m + \033[1;33m%s \033[0m[y/N]: ' "$@"
	read answer
	case "$answer" in
		[yY]|[yY][eE][sS]) return 0 ;;
		*) return 1 ;;
	esac
}

checkBinary() {
	type "$@" >/dev/null 2>&1
}

checkDownloadAbility() {
	if ! checkBinary curl && ! checkBinary wget; then
		errorMsg 'Either wget or curl are required for this script'
		exit 1
	fi
}

fetch() {
	if checkBinary curl; then
		curl -fsL "$@"
	else
		wget -qO- "$@"
	fi
}

# Process begins:
blocklist=''

infoMsg 'Configuration:'
	logMsg "Hosts location: $dstHosts"
	logMsg "Destination IP: $dstIp"

infoMsg 'Downloading lists...'
	checkDownloadAbility
	for url in $sources; do
		logMsg "$url"
		content=$(fetch "$url") || true

		if
			[ -z "$content" ] &&
			! promptMsg 'Error downloading list, do you want to continue?'
		then
			exit 0
		fi

		blocklist=$(printf '%s\n%s\n' "$blocklist" "$content")
		unset content
	done

infoMsg 'Parsing lists...'
	logMsg 'Remove carriage return'
		blocklist=$(printf '%s\n' "$blocklist" | tr -d '\r')

	logMsg 'Remove comments'
		blocklist=$(printf '%s\n' "$blocklist" | sed 's/#.*$//g')

	logMsg 'Trim spaces'
		blocklist=$(printf '%s\n' "$blocklist" | sed 's/[[:blank:]]*$//g;s/^[[:blank:]]*//g')

	logMsg 'Remove empty lines'
		blocklist=$(printf '%s\n' "$blocklist" | sed '/^$/d')

	logMsg 'Select only hosts lines'
		ipRegex='\([[:digit:]]\{1,3\}\.\)\{3\}[[:digit:]]\{1,3\}'
		domainRegex='\([[:alnum:]_-]\{1,63\}\.\)\{1,\}[[:alpha:]][[:alnum:]_-]\{1,62\}'
		blocklist=$(printf '%s\n' "$blocklist" | sed -n "/^\($ipRegex[[:blank:]]\{1,\}\)\{0,1\}$domainRegex$/p")

	logMsg 'Remove old destination'
		blocklist=$(printf '%s\n' "$blocklist" | sed "s/^$ipRegex[[:blank:]]\{1,\}//g")

	logMsg 'Transform all entries to lowercase'
		blocklist=$(printf '%s\n' "$blocklist" | tr '[:upper:]' '[:lower:]')

	logMsg 'Remove local entries'
		localDomainRegex='/\.\localdomain[[:blank:]]*$/d;/\.\local[[:blank:]]*$/d'
		blocklist=$(printf '%s\n' "$blocklist" | sed "$localDomainRegex")

	logMsg 'Apply whitelist'
		for domain in $whitelist; do
			blocklist=$(printf '%s\n' "$blocklist" | sed "/$domain/d")
		done

	logMsg 'Apply blacklist'
		for domain in $blacklist; do
			blocklist=$(printf '%s\n%s\n' "$blocklist" "$domain")
		done

	logMsg 'Sort entries'
		blocklist=$(printf '%s\n' "$blocklist" | sort -u)

	logMsg 'Add new destination'
		blocklist=$(printf '%s\n' "$blocklist" | sed "s/^/$dstIp /g")

infoMsg 'Generating hosts file...'
	template='# %s\n# <header>%s# </header>\n# <blocklist>\n%s\n# </blocklist>'
	hosts=$(printf "$template" "$(date)" "$header" "$blocklist")

if ! [ $(id -u) = 0 ] && checkBinary sudo; then
	printf '%s\n' "$hosts" | sudo tee "$dstHosts" >/dev/null
else
	printf '%s\n' "$hosts" | tee "$dstHosts" >/dev/null
fi

infoMsg "$(printf '%s\n' "$blocklist" | wc -l) hosts added!"

